name: Hyperion CI/CD Pipeline

on:
  push:
    branches: [ master, develop ]
  pull_request:
    branches: [ master ]

jobs:
  test:
    runs-on: ubuntu-latest
    
    services:
      postgres:
        image: postgres:13
        env:
          POSTGRES_DB: hyperion_db
          POSTGRES_USER: test_user
          POSTGRES_PASSWORD: test_password
        ports:
          - 5432:5432
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
      
      redis:
        image: redis:6
        ports:
          - 6379:6379
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Set up Python 3.12
      uses: actions/setup-python@v4
      with:
        python-version: '3.12'
        cache: 'pip'
    
    - name: Install system dependencies
      run: |
        sudo apt-get update
        sudo apt-get install -y libpq-dev
    
    - name: Install Python dependencies
      run: |
        pip install --upgrade pip
        pip install -r requirements.txt
        pip install pytest-cov coverage flake8 safety bandit
    
    - name: Set up environment variables
      run: |
        echo "DEBUG=False" >> $GITHUB_ENV
        echo "SECRET_KEY=test-secret-key-for-ci" >> $GITHUB_ENV
        echo "DATABASE_URL=postgresql://test_user:test_password@localhost:5432/hyperion_db" >> $GITHUB_ENV
        echo "DB_NAME=hyperion_db" >> $GITHUB_ENV
        echo "DB_USER=test_user" >> $GITHUB_ENV
        echo "DB_PASSWORD=test_password" >> $GITHUB_ENV
        echo "DB_HOST=localhost" >> $GITHUB_ENV
        echo "DB_PORT=5432" >> $GITHUB_ENV
        echo "REDIS_URL=redis://localhost:6379/0" >> $GITHUB_ENV
    
    - name: Run Django checks
      run: |
        python manage.py check --deploy
    
    - name: Check for missing migrations
      run: |
        python manage.py makemigrations --check --dry-run
    
    - name: Run migrations
      run: |
        python manage.py migrate
    
    - name: Collect static files
      run: |
        python manage.py collectstatic --noinput
    
    - name: Run unit tests with coverage
      run: |
        coverage run -m pytest api/tests.py -v
        coverage report --show-missing
        coverage xml
    
    - name: Upload coverage to Codecov
      uses: codecov/codecov-action@v3
      with:
        file: ./coverage.xml
        flags: unittests
        name: codecov-umbrella
        fail_ci_if_error: false
    
    - name: Lint code with flake8
      run: |
        flake8 api/ hyperion/ --count --select=E9,F63,F7,F82 --show-source --statistics
        flake8 api/ hyperion/ --count --exit-zero --max-complexity=10 --max-line-length=88 --statistics
    
    - name: Security check with safety
      run: |
        safety check --json || true
    
    - name: Security analysis with bandit
      run: |
        bandit -r api/ hyperion/ -f json -o bandit-report.json || true
    
    - name: Test API endpoints
      run: |
        python manage.py test api.tests --keepdb --verbosity=2

  security:
    runs-on: ubuntu-latest
    needs: test
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Run Trivy vulnerability scanner
      uses: aquasecurity/trivy-action@master
      with:
        scan-type: 'fs'
        scan-ref: '.'
        format: 'sarif'
        output: 'trivy-results.sarif'
    
    - name: Upload Trivy scan results to GitHub Security tab
      uses: github/codeql-action/upload-sarif@v2
      if: always()
      with:
        sarif_file: 'trivy-results.sarif'

  docker:
    runs-on: ubuntu-latest
    needs: test
    if: github.ref == 'refs/heads/master'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3
    
    - name: Build Docker image
      run: |
        docker build -t hyperion:latest .
    
    - name: Test Docker image
      run: |
        docker run --rm hyperion:latest python manage.py check

  deploy:
    needs: [test, security]
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/master'
    
    steps:
    - name: Deploy to production
      run: |
        echo "ðŸš€ DÃ©ploiement vers production"
        echo "âœ… Tests passÃ©s avec succÃ¨s"
        echo "ðŸ”’ ContrÃ´les de sÃ©curitÃ© validÃ©s"
        echo "ðŸ“¦ PrÃªt pour le dÃ©ploiement"
        # TODO: Ajouter les vraies commandes de dÃ©ploiement
        # Exemples:
        # - SSH vers serveur de production
        # - Docker deployment
        # - Kubernetes deployment
        # - Notification Slack
    
    - name: Notification
      run: |
        echo "ðŸŽ‰ DÃ©ploiement Hyperion terminÃ© avec succÃ¨s!"
